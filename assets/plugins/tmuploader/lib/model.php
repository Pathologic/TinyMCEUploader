<?php namespace TinyMCEUploader;

include_once MODX_BASE_PATH . 'assets/lib/MODxAPI/autoTable.abstract.php';
include_once(MODX_BASE_PATH . 'assets/lib/Helpers/PHPThumb.php');
include_once(MODX_BASE_PATH . 'assets/lib/Helpers/FS.php');

class Model extends \autoTable
{
    protected $fs = null;
    protected $table = 'tmuploader_images';
    protected $default_field = array(
        'file'      => '',
        'rid'       => 0,
        'createdby' => 0,
        'createdon' => ''
    );

    public function __construct (\DocumentParser $modx, $debug = false)
    {
        parent::__construct($modx, $debug);
        $this->fs = \Helpers\FS::getInstance();
    }


    public function upload ($file, $fire_events = false)
    {
        $this->create();
        $this->set('file', $file);
        $this->touch('createdon');
        $this->set('createdby', $this->modx->getLoginUserID('mgr'));
        $out = $this->save(true);
        if ($out) {
            $this->invokeEvent('OnFileBrowserUpload', array(
                'invokedBy' => 'TinyMCEUploader',
                'filepath' => $this->fs->takeFileDir($file),
                'filename' => $this->fs->takeFileBasename($file)
            ), $fire_events);
        }

        return $out;
    }

    public function delete ($ids, $fire_events = false)
    {
        $ids = $this->cleanIDs($ids, ',', array(0));
        if (empty($ids) || is_scalar($ids)) {
            return;
        }
        $_ids = $this->sanitarIn($ids);
        $q = $this->query("SELECT `file` FROM {$this->makeTable($this->table)} WHERE `id` IN ({$_ids})");
        $images = $this->modx->db->getColumn('file', $q);
        foreach ($images as $file) {
            $this->invokeEvent('OnFileBrowserDelete', array(
                'invokedBy' => 'TinyMCEUploader',
                'filepath' => $this->fs->takeFileDir($file),
                'filename' => $this->fs->takeFileBasename($file)
            ), $fire_events);
        }

        return parent::delete($ids, $fire_events); // TODO: Change the autogenerated stub
    }

    public function deleteByRid ($ids, $fire_events = false)
    {
        $ids = $this->cleanIDs($ids, ',', array(0));
        if (empty($ids) || is_scalar($ids)) {
            return false;
        }
        $_ids = $this->sanitarIn($ids);
        $ids = array();
        $images = array();
        $q = $this->query("SELECT `id`, `file` FROM {$this->makeTable($this->table)} WHERE `rid` IN ({$_ids})");
        while ($row = $this->modx->db->getRow($q)) {
            $ids[] = $row['id'];
            $images[] = $row['file'];
        }
        if (empty($ids)) return;

        foreach ($images as $file) {
            $this->invokeEvent('OnFileBrowserDelete', array(
                'invokedBy' => 'TinyMCEUploader',
                'filepath' => $this->fs->takeFileDir($file),
                'filename' => $this->fs->takeFileBasename($file)
            ), $fire_events);
        }

        return parent::delete($ids, $fire_events); // TODO: Change the autogenerated stub
    }

    public function deleteLost ($lifetime = 24, $fire_events = false)
    {
        $lifetime = (int)$lifetime;
        if ($lifetime <=0) return;
        $ids = array();
        $images = array();
        $q = $this->query("SELECT `id`,`file` FROM {$this->makeTable($this->table)} WHERE `rid`=0 AND TIMESTAMPDIFF(hour, `createdon`, NOW()) > {$lifetime}");
        while ($row = $this->modx->db->getRow($q)) {
            $ids[] = $row['id'];
            $images[] = $row['file'];
        }
        if (empty($ids)) return;

        foreach ($images as $file) {
            $this->invokeEvent('OnFileBrowserDelete', array(
                'invokedBy' => 'TinyMCEUploader',
                'filepath' => $this->fs->takeFileDir($file),
                'filename' => $this->fs->takeFileBasename($file)
            ), $fire_events);
        }

        return parent::delete($ids, $fire_events); // TODO: Change the autogenerated stub
    }


    public function touch ($field)
    {
        $this->set($field, date('Y-m-d H:i:s', time() + $this->modx->config['server_offset_time']));

        return $this;
    }

    public function stripName ($name)
    {
        $filename = $this->fs->takeFileName($name);
        $ext = $this->fs->takeFileExt($name);

        return $this->modx->stripAlias($filename) . '.' . $ext;
    }

    public function createTable ()
    {
        $sql = "CREATE TABLE IF NOT EXISTS {$this->makeTable($this->table)} (
            `id` int(10) NOT NULL AUTO_INCREMENT,
            `rid` int(10) NOT NULL,
            `file` TEXT NOT NULL,
            `createdon` datetime NOT NULL,
            `createdby` int(10) NOT NULL,
            PRIMARY KEY  (`id`),
            KEY `rid` (`rid`),
            KEY `createdon` (`createdon`)
        ) ENGINE=MyISAM COMMENT='Datatable for TinyMCE Uploader Files.';";

        return $this->query($sql);
    }
}
